// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  accounts       Account[]          @relation("UserToAccount")
  createdAt      DateTime           @default(now())
  email          String?            @unique
  emailVerified  DateTime?
  favoriteIds    FavoriteProducts[] @relation("UserToFavoriteProducts")
  hashedPassword String?
  id             String             @id @default(uuid())
  image          String?
  name           String?
  stores         Store[]            @relation("UserToStore")
  updatedAt      DateTime           @updatedAt
}

model FavoriteProducts {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String // Foreign Key to Product
  user      User    @relation("UserToFavoriteProducts", fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([productId])
  @@index([userId])
}

model Account {
  access_token      String?
  expires_at        Int?
  id                String  @id @default(uuid())
  id_token          String?
  provider          String
  providerAccountId String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation("UserToAccount", fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Store {
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  colors     Color[]     @relation("StoreToColor")
  createdAt  DateTime    @default(now())
  id         String      @id @default(uuid())
  name       String
  orders     Order[]     @relation("StoreToOrder")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  updatedAt  DateTime    @updatedAt
  user       User        @relation("UserToStore", fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model Billboard {
  categories Category[]
  createdAt  DateTime   @default(now())
  id         String     @id @default(uuid())
  imageUrl   String
  label      String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  storeId    String
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  billboardId String // Foreign Key to Billboard
  createdAt   DateTime  @default(now())
  id          String    @id @default(uuid())
  name        String
  products    Product[] @relation("CategoryToProduct")
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId     String // Foreign Key to Store
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  category         Category           @relation("CategoryToProduct", fields: [categoryId], references: [id])
  categoryId       String // Foreign Key to Category
  colors           Color[]
  createdAt        DateTime           @default(now())
  description      String?
  id               String             @id @default(uuid())
  images           Image[] // Relation to Image model
  isArchived       Boolean            @default(false)
  isFeatured       Boolean            @default(false)
  name             String
  orderItems       OrderItem[] // Relation to Order model
  price            Decimal
  sizes            Size[]
  stock            Int
  store            Store              @relation("StoreToProduct", fields: [storeId], references: [id])
  storeId          String // Foreign Key to Store
  updatedAt        DateTime           @updatedAt
  favoriteProducts FavoriteProducts[] // Relation to FavoriteProducts model

  @@index([storeId])
  @@index([categoryId])
}

model Order {
  address    String      @default("")
  createdAt  DateTime    @default(now())
  id         String      @id @default(uuid())
  isPaid     Boolean     @default(false)
  orderItems OrderItem[] // Relation to OrderItem model
  phone      String      @default("")
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  storeId    String // Foreign Key to Store
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String // Foreign Key to Order
  product   Product @relation(fields: [productId], references: [id])
  productId String // Foreign Key to Product

  @@index([orderId])
  @@index([productId])
}

model Size {
  createdAt DateTime  @default(now())
  id        String    @id @default(uuid())
  name      String
  products  Product[] // Relation to Product model
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  storeId   String // Foreign Key to Store
  updatedAt DateTime  @updatedAt
  value     String

  @@index([storeId])
}

model Color {
  createdAt DateTime  @default(now())
  id        String    @id @default(uuid())
  name      String
  products  Product[] // Relation to Product model
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  storeId   String // Foreign Key to Store
  updatedAt DateTime  @updatedAt
  url       String

  @@index([storeId])
}

model Image {
  createdAt DateTime @default(now())
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String // Foreign Key to Product
  updatedAt DateTime @updatedAt
  url       String // URL of the image

  @@index([productId])
}
